{"title":"TP1 - Principal Component Analysis","markdown":{"yaml":{"title":"TP1 - Principal Component Analysis","subtitle":"4modIA / 2025-2026","format":{"html":{"toc":true,"toc-depth":4,"toc-location":"left","number-sections":true,"css":"styles.css"}}},"headingText":"Compréhension de l'ACP","containsRefs":false,"markdown":"\n\n```{r}\n#| warning: false\n#| message: false\n\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(reshape2)\nlibrary(FactoMineR)\nlibrary(factoextra)\nlibrary(corrplot)\nlibrary(reticulate)\n\n#use_virtualenv(\"r-reticulate\")\n```\n\n\n## Description des données\n\nDans cette première partie, nous considérons un jeu de données fictif pour décortiquer l'ACP. On considère les notes de 9 élèves dans 4 matières (Mathématiques, Physique, Français et Anglais).\n\n```{r}\n#| echo: false\n\nNotes<-data.frame(Maths = c(6,8,6,14.5,15,10,5.5,13,9), \n                  Physique=c(6,8,7,14,15,10,7,12,9),\n                  Francais = c(5,8,11,16,12,5.5,14,8.5,12), \n                  Anglais=c(5,8,10,15,12,7,11,9,12) )\nrownames(Notes)<-c(\"Olivier\",\"Laura\",\"Emma\",\"Baptiste\",\"Aymeric\",\"Mathilde\",\"Pauline\",\"Maxime\",\"Chloé\")\n\nn<-nrow(Notes)\np<- ncol(Notes) \n```\n\n```{r}\n#| echo: false\nknitr::kable(Notes,align = 'c')\n```\n\n**Question :** Représentez la distribution des notes par matière\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n**Question :** A l'aide de la fonction `corrplot()` de la librairie portant le même nom, représentez la matrice des corrélations de ce jeu de données\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n## ACP centrée\n\nComme les 4 variables sont à la même échelle, on décide de faire une analyse en composantes principales (ACP) sur les données centrées. A l'aide de la fonction `scale()`, centrez les données.\n\n```{r}\n#| eval: false\n\nNoteC<-scale(...) # A COMPLETER\n```\n\n**Question :** Quelle matrice cherche-t-on à diagonaliser dans cette ACP ? Programmez cette matrice et diagonalisez-la à l'aide de la fonction `eigen()`.\n\n```{r}\n#| eval: false\n\nGamma<- .... # A COMPLETER\nA<-eigen(...)  \n```\n\n**Question :** Que représentent les valeurs propres dans ce cas ? Que représente la somme de ces valeurs propres ? Vérifiez numériquement.\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n**Question :** Faites une ACP centrée à l'aide de la fonction `PCA` de la librairie `FactoMineR`. Retrouvez l'interprétation des valeurs propres et représentez-les à l'aide de la fonction `fviz_eig()` de la librairie `factoextra`.\n\n```{r}\n#| eval: false \n# A COMPLETER\nrespca<-PCA(...,graph=F)\nrespca$......\nfviz_eig(respca)\n```\n\n**Question :** Déterminez les axes principaux à partir des résultats de la diagonalisation. Comparez avec les résultats dans `respca`.\n\n```{r}\n#| eval: false \n\n# A COMPLETER\n```\n\n**Question :** Que contient la sortie `respca$ind$coord$` ? Comment obtient-on ses résultats à partir de la diagonalisation ? Vérifiez visuellement à l'aide de la commande `fviz_pca_ind(respca)`.\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n## ACP centrée réduite\n\nOn fait maintenant une analyse en composantes principales sur les données centrées et réduites. Centrez et réduisez les données.\n\n```{r}\n#| eval: false \nNotesCR<-....\n```\n\n**Question :** Quelle matrice cherche-t-on à diagonaliser dans ce cadre en ACP ? Programmez cette matrice et diagonalisez-la à l'aide de la fonction `eigen()`.\n\n```{r}\n#| eval: false \nGamma2<- .... # A COMPLETER\nB<-eigen(...)  \n```\n\n**Question :** Que représentent les valeurs propres dans ce cas ? Que représente la somme de ces valeurs propres ? Vérifiez numériquement.\n\n```{r,eval=F}\n# A COMPLETER\n```\n\n**Question :** Faites une ACP centrée réduite à l'aide de la fonction `PCA` de la librairie `FactoMineR`. Retrouvez l'interprétation des valeurs propres et représentez-les à l'aide de la fonction `fviz_eig()` de la librairie `factoextra`.\n\n```{r}\n#| eval: false \n# A COMPLETER\nrespca2<-PCA(...,graph=F)\nfviz_eig(respca2)\n```\n\n**Question :** Que représente la sortie suivante ?\n\n```{r,eval=F}\nfviz_pca_var(respca2)\n```\n\n**Question :** Représentez les projetés des individus dans le premier plan factoriel et commentez.\n\n```{r}\n#| eval: false \n# A COMPLETER\n```\n\n**Question :** Comment peut-on obtenir les résultats de cette ACP centrée réduite à partir du tableau de données centrées. Vérifiez numériquement.\n\n```{r}\n#| eval: false \n# A COMPLETER\n```\n\n# Données Ozone\n\n## Description des données\n\nLes données étudiées ont été recueillies à Rennes dans $112$ stations durant l'été 2001. Les 12 variables observées sont :\n\n-   maxO3 : Maximum de concentration d'ozone observé sur la journée en $\\mu$gr/m3\n-   T9, T12, T15 : Température observée à 9, 12 et 15h\n-   Ne9, Ne12, Ne15 : Nébulosité observée à 9, 12 et 15h\n-   Vx9, Vx12, Vx15 : Composante E-O du vent à 9, 12 et 15h\n-   vent : orientation du vent à 12h\n-   pluie : occurrence ou non de précipitations\n\n```{r}\nOzone<-read.table(\"Ozone.txt\",header=T)\nOzone$pluie<-as.factor(Ozone$pluie)\nOzone$vent<-as.factor(Ozone$vent)\nOzone<-Ozone[,-11]\nsummary(Ozone)   \n```\n\n**Question :** Faites quelques statistiques descriptives pour appréhender le jeu de données. En particulier, étudiez les corrélations entre les variables quantitatives.\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n## ACP avec FactoMineR\n\n**Question :** Mettez en place une analyse en composantes principales à l'aide de la librairie `FactoMineR`. Combien de composantes principales retenez-vous ? Comment interprétez-vous les composantes principales en fonction des variables initiales ? Commentez la projection des individus dans les plans factoriels ? Vous pouvez compléter votre analyse à l'aide des variables qualitatives Pluie et Vent.\n\n```{r}\n#| eval: false \n\n# A COMPLETER\n```\n\n## ACP en Python\n\nOn s'intéresse maintenant à faire une analyse en composante principale sous Python. A l'aide des commandes suivantes, mettez en place une telle analyse. N'hésitez pas à améliorer la programmation en Python !\n\n### Avec le package [Prince](https://maxhalford.github.io/prince/)\n\n```{python}\n#| eval: False\n\nimport numpy as np\nimport pandas as pd\n\nOzonepy=pd.read_csv('Ozone.txt',sep=\" \",header=0).set_index([\"pluie\",\"vent\"])\nOzonepy=Ozonepy.iloc[:,:10]\nOzonepy\n```\n\n```{python}\n#| eval: False\n\nimport prince\n\npca = prince.PCA(\n    n_components=5,\n    n_iter=3,\n    rescale_with_mean=True,\n    rescale_with_std=True,\n    copy=True,\n    check_input=True,\n    engine='sklearn',\n    random_state=42\n)\n\npca = pca.fit(Ozonepy)\npca.eigenvalues_summary\n    #pca.eigenvalues_\n    #pca.percentage_of_variance_\n    #pca.cumulative_percentage_of_variance_\n    \npca.scree_plot()    \n```\n\nProjection des individus :\n\n```{python}\n#| eval: False\n\n# Coordonnées - Composantes principales\npca.transform(Ozonepy).head()\n\n# Visualisation\n\npca.plot(\n     Ozonepy,\n    x_component=0,\n    y_component=1,\n    color_rows_by='pluie',\n    show_row_markers=True,\n    show_column_markers=False,\n    show_row_labels=False,\n    row_labels_column=None,  # for DataFrames with a MultiIndex\n    show_column_labels=False\n)\n```\n\n```{python}\n#| eval: False\n\npca.plot(\n     Ozonepy,\n    x_component=0,\n    y_component=1,\n    color_rows_by='vent',\n    show_row_markers=True,\n    show_column_markers=False,\n    show_row_labels=False,\n    row_labels_column=None,  # for DataFrames with a MultiIndex\n    show_column_labels=False\n)\n```\n\nLes axes principaux :\n\n```{python}\n#| eval: False\n\npca.column_coordinates_\n```\n\nContribution des individus :\n\n```{python}\n#| eval: False\n\npca.row_contributions_.head().style.format(precision=2)  \n```\n\nContributions des variables :\n\n```{python}\n#| eval: False\n\npca.column_contributions_.style.format(precision=2)\n```\n\nCorrélation des variables :\n\n```{python}\n#| eval: False\n\npca.column_correlations.style.format(precision=2)\n```\n\n### Avec scikit-learn\n\n```{python}\n#| eval: False\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\nOzonepy=pd.read_csv('Ozone.txt',sep=\" \",header=0)\nOzoneSC=Ozonepy.iloc[:,:10]\nOzoneSC= StandardScaler().fit_transform(OzoneSC)\n```\n\n```{python}\n#| eval: False\nfrom sklearn.decomposition import PCA\npca=PCA(n_components=3)\ndataPCA=pca.fit_transform(OzoneSC)\npca.explained_variance_ratio_\nprint(pca.explained_variance_ratio_.cumsum()) \n\n\nprincipalDf=pd.DataFrame(data=dataPCA,columns=['PC 1', 'PC 2','PC 3'])\n```\n\n```{python}\n#| eval: False\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n#pca_df = pd.DataFrame({\n#    \"Dim1\" : dataPCA[:,0], \n#    \"Dim2\" : dataPCA[:,1],\n#    \"Pluie\" :Ozonepy.pluie,\n#    \"Vent\" : Ozonepy.vent\n#})\n#fig=px.scatter(pca_df,x=\"Dim1\", y=\"Dim2\", color=\"Vent\")\n#fig.show()\n#fig=px.scatter(pca_df,x=\"Dim1\", y=\"Dim2\", color=\"Pluie\")\n#fig.show()\n\nfig=px.scatter(dataPCA,x=0,y=1,color=Ozonepy.pluie)\nfig.show()\n\nfig=px.scatter(dataPCA,x=0,y=1,color=Ozonepy.vent)\nfig.show()\n```\n\n```{python}\n#| eval: False\n\nloadings = pca.components_.T * np.sqrt(pca.explained_variance_)\n#features = ['max03', 'T9', 'T12', 'T15','\"Ne9','Ne12','Ne15','Vx9','Vx12','Vx15']\nfeatures=Ozonepy.iloc[:,:10].columns.values\n\nfor i, feature in enumerate(features):\n    fig.add_annotation(\n        ax=0, ay=0,\n        axref=\"x\", ayref=\"y\",\n        x=loadings[i, 0],\n        y=loadings[i, 1],\n        showarrow=True,\n        arrowsize=2,\n        arrowhead=2,\n        xanchor=\"right\",\n        yanchor=\"top\"\n    )\n    fig.add_annotation(\n        x=loadings[i, 0],\n        y=loadings[i, 1],\n        ax=0, ay=0,\n        xanchor=\"center\",\n        yanchor=\"bottom\",\n        text=feature,\n        yshift=5,\n    )\n#fig.show()\n```\n\n```{python}\n#| eval: False\n\n# cercle des correlation\n\n(fig, ax) = plt.subplots(figsize=(8, 8))\nfor i in range(0, pca.components_.shape[1]):\n    ax.arrow(0,\n             0,  # Start the arrow at the origin\n             loadings[i, 0],  #0 for PC1\n             loadings[i,1],  #1 for PC2\n             head_width=0.1,\n             head_length=0.1)\n\n    plt.text(loadings[i,0] + 0.05,\n             loadings[i,1] + 0.05,\n             features[i])\n\n\nan = np.linspace(0, 2 * np.pi, 100)\nplt.plot(np.cos(an), np.sin(an))  # Add a unit circle for scale\nplt.axis('equal')\nax.set_title('Variable factor map')\nplt.show()\n\n```\n","srcMarkdownNoYaml":"\n\n```{r}\n#| warning: false\n#| message: false\n\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(reshape2)\nlibrary(FactoMineR)\nlibrary(factoextra)\nlibrary(corrplot)\nlibrary(reticulate)\n\n#use_virtualenv(\"r-reticulate\")\n```\n\n# Compréhension de l'ACP\n\n## Description des données\n\nDans cette première partie, nous considérons un jeu de données fictif pour décortiquer l'ACP. On considère les notes de 9 élèves dans 4 matières (Mathématiques, Physique, Français et Anglais).\n\n```{r}\n#| echo: false\n\nNotes<-data.frame(Maths = c(6,8,6,14.5,15,10,5.5,13,9), \n                  Physique=c(6,8,7,14,15,10,7,12,9),\n                  Francais = c(5,8,11,16,12,5.5,14,8.5,12), \n                  Anglais=c(5,8,10,15,12,7,11,9,12) )\nrownames(Notes)<-c(\"Olivier\",\"Laura\",\"Emma\",\"Baptiste\",\"Aymeric\",\"Mathilde\",\"Pauline\",\"Maxime\",\"Chloé\")\n\nn<-nrow(Notes)\np<- ncol(Notes) \n```\n\n```{r}\n#| echo: false\nknitr::kable(Notes,align = 'c')\n```\n\n**Question :** Représentez la distribution des notes par matière\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n**Question :** A l'aide de la fonction `corrplot()` de la librairie portant le même nom, représentez la matrice des corrélations de ce jeu de données\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n## ACP centrée\n\nComme les 4 variables sont à la même échelle, on décide de faire une analyse en composantes principales (ACP) sur les données centrées. A l'aide de la fonction `scale()`, centrez les données.\n\n```{r}\n#| eval: false\n\nNoteC<-scale(...) # A COMPLETER\n```\n\n**Question :** Quelle matrice cherche-t-on à diagonaliser dans cette ACP ? Programmez cette matrice et diagonalisez-la à l'aide de la fonction `eigen()`.\n\n```{r}\n#| eval: false\n\nGamma<- .... # A COMPLETER\nA<-eigen(...)  \n```\n\n**Question :** Que représentent les valeurs propres dans ce cas ? Que représente la somme de ces valeurs propres ? Vérifiez numériquement.\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n**Question :** Faites une ACP centrée à l'aide de la fonction `PCA` de la librairie `FactoMineR`. Retrouvez l'interprétation des valeurs propres et représentez-les à l'aide de la fonction `fviz_eig()` de la librairie `factoextra`.\n\n```{r}\n#| eval: false \n# A COMPLETER\nrespca<-PCA(...,graph=F)\nrespca$......\nfviz_eig(respca)\n```\n\n**Question :** Déterminez les axes principaux à partir des résultats de la diagonalisation. Comparez avec les résultats dans `respca`.\n\n```{r}\n#| eval: false \n\n# A COMPLETER\n```\n\n**Question :** Que contient la sortie `respca$ind$coord$` ? Comment obtient-on ses résultats à partir de la diagonalisation ? Vérifiez visuellement à l'aide de la commande `fviz_pca_ind(respca)`.\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n## ACP centrée réduite\n\nOn fait maintenant une analyse en composantes principales sur les données centrées et réduites. Centrez et réduisez les données.\n\n```{r}\n#| eval: false \nNotesCR<-....\n```\n\n**Question :** Quelle matrice cherche-t-on à diagonaliser dans ce cadre en ACP ? Programmez cette matrice et diagonalisez-la à l'aide de la fonction `eigen()`.\n\n```{r}\n#| eval: false \nGamma2<- .... # A COMPLETER\nB<-eigen(...)  \n```\n\n**Question :** Que représentent les valeurs propres dans ce cas ? Que représente la somme de ces valeurs propres ? Vérifiez numériquement.\n\n```{r,eval=F}\n# A COMPLETER\n```\n\n**Question :** Faites une ACP centrée réduite à l'aide de la fonction `PCA` de la librairie `FactoMineR`. Retrouvez l'interprétation des valeurs propres et représentez-les à l'aide de la fonction `fviz_eig()` de la librairie `factoextra`.\n\n```{r}\n#| eval: false \n# A COMPLETER\nrespca2<-PCA(...,graph=F)\nfviz_eig(respca2)\n```\n\n**Question :** Que représente la sortie suivante ?\n\n```{r,eval=F}\nfviz_pca_var(respca2)\n```\n\n**Question :** Représentez les projetés des individus dans le premier plan factoriel et commentez.\n\n```{r}\n#| eval: false \n# A COMPLETER\n```\n\n**Question :** Comment peut-on obtenir les résultats de cette ACP centrée réduite à partir du tableau de données centrées. Vérifiez numériquement.\n\n```{r}\n#| eval: false \n# A COMPLETER\n```\n\n# Données Ozone\n\n## Description des données\n\nLes données étudiées ont été recueillies à Rennes dans $112$ stations durant l'été 2001. Les 12 variables observées sont :\n\n-   maxO3 : Maximum de concentration d'ozone observé sur la journée en $\\mu$gr/m3\n-   T9, T12, T15 : Température observée à 9, 12 et 15h\n-   Ne9, Ne12, Ne15 : Nébulosité observée à 9, 12 et 15h\n-   Vx9, Vx12, Vx15 : Composante E-O du vent à 9, 12 et 15h\n-   vent : orientation du vent à 12h\n-   pluie : occurrence ou non de précipitations\n\n```{r}\nOzone<-read.table(\"Ozone.txt\",header=T)\nOzone$pluie<-as.factor(Ozone$pluie)\nOzone$vent<-as.factor(Ozone$vent)\nOzone<-Ozone[,-11]\nsummary(Ozone)   \n```\n\n**Question :** Faites quelques statistiques descriptives pour appréhender le jeu de données. En particulier, étudiez les corrélations entre les variables quantitatives.\n\n```{r}\n#| eval: false\n\n# A COMPLETER\n```\n\n## ACP avec FactoMineR\n\n**Question :** Mettez en place une analyse en composantes principales à l'aide de la librairie `FactoMineR`. Combien de composantes principales retenez-vous ? Comment interprétez-vous les composantes principales en fonction des variables initiales ? Commentez la projection des individus dans les plans factoriels ? Vous pouvez compléter votre analyse à l'aide des variables qualitatives Pluie et Vent.\n\n```{r}\n#| eval: false \n\n# A COMPLETER\n```\n\n## ACP en Python\n\nOn s'intéresse maintenant à faire une analyse en composante principale sous Python. A l'aide des commandes suivantes, mettez en place une telle analyse. N'hésitez pas à améliorer la programmation en Python !\n\n### Avec le package [Prince](https://maxhalford.github.io/prince/)\n\n```{python}\n#| eval: False\n\nimport numpy as np\nimport pandas as pd\n\nOzonepy=pd.read_csv('Ozone.txt',sep=\" \",header=0).set_index([\"pluie\",\"vent\"])\nOzonepy=Ozonepy.iloc[:,:10]\nOzonepy\n```\n\n```{python}\n#| eval: False\n\nimport prince\n\npca = prince.PCA(\n    n_components=5,\n    n_iter=3,\n    rescale_with_mean=True,\n    rescale_with_std=True,\n    copy=True,\n    check_input=True,\n    engine='sklearn',\n    random_state=42\n)\n\npca = pca.fit(Ozonepy)\npca.eigenvalues_summary\n    #pca.eigenvalues_\n    #pca.percentage_of_variance_\n    #pca.cumulative_percentage_of_variance_\n    \npca.scree_plot()    \n```\n\nProjection des individus :\n\n```{python}\n#| eval: False\n\n# Coordonnées - Composantes principales\npca.transform(Ozonepy).head()\n\n# Visualisation\n\npca.plot(\n     Ozonepy,\n    x_component=0,\n    y_component=1,\n    color_rows_by='pluie',\n    show_row_markers=True,\n    show_column_markers=False,\n    show_row_labels=False,\n    row_labels_column=None,  # for DataFrames with a MultiIndex\n    show_column_labels=False\n)\n```\n\n```{python}\n#| eval: False\n\npca.plot(\n     Ozonepy,\n    x_component=0,\n    y_component=1,\n    color_rows_by='vent',\n    show_row_markers=True,\n    show_column_markers=False,\n    show_row_labels=False,\n    row_labels_column=None,  # for DataFrames with a MultiIndex\n    show_column_labels=False\n)\n```\n\nLes axes principaux :\n\n```{python}\n#| eval: False\n\npca.column_coordinates_\n```\n\nContribution des individus :\n\n```{python}\n#| eval: False\n\npca.row_contributions_.head().style.format(precision=2)  \n```\n\nContributions des variables :\n\n```{python}\n#| eval: False\n\npca.column_contributions_.style.format(precision=2)\n```\n\nCorrélation des variables :\n\n```{python}\n#| eval: False\n\npca.column_correlations.style.format(precision=2)\n```\n\n### Avec scikit-learn\n\n```{python}\n#| eval: False\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\nOzonepy=pd.read_csv('Ozone.txt',sep=\" \",header=0)\nOzoneSC=Ozonepy.iloc[:,:10]\nOzoneSC= StandardScaler().fit_transform(OzoneSC)\n```\n\n```{python}\n#| eval: False\nfrom sklearn.decomposition import PCA\npca=PCA(n_components=3)\ndataPCA=pca.fit_transform(OzoneSC)\npca.explained_variance_ratio_\nprint(pca.explained_variance_ratio_.cumsum()) \n\n\nprincipalDf=pd.DataFrame(data=dataPCA,columns=['PC 1', 'PC 2','PC 3'])\n```\n\n```{python}\n#| eval: False\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n#pca_df = pd.DataFrame({\n#    \"Dim1\" : dataPCA[:,0], \n#    \"Dim2\" : dataPCA[:,1],\n#    \"Pluie\" :Ozonepy.pluie,\n#    \"Vent\" : Ozonepy.vent\n#})\n#fig=px.scatter(pca_df,x=\"Dim1\", y=\"Dim2\", color=\"Vent\")\n#fig.show()\n#fig=px.scatter(pca_df,x=\"Dim1\", y=\"Dim2\", color=\"Pluie\")\n#fig.show()\n\nfig=px.scatter(dataPCA,x=0,y=1,color=Ozonepy.pluie)\nfig.show()\n\nfig=px.scatter(dataPCA,x=0,y=1,color=Ozonepy.vent)\nfig.show()\n```\n\n```{python}\n#| eval: False\n\nloadings = pca.components_.T * np.sqrt(pca.explained_variance_)\n#features = ['max03', 'T9', 'T12', 'T15','\"Ne9','Ne12','Ne15','Vx9','Vx12','Vx15']\nfeatures=Ozonepy.iloc[:,:10].columns.values\n\nfor i, feature in enumerate(features):\n    fig.add_annotation(\n        ax=0, ay=0,\n        axref=\"x\", ayref=\"y\",\n        x=loadings[i, 0],\n        y=loadings[i, 1],\n        showarrow=True,\n        arrowsize=2,\n        arrowhead=2,\n        xanchor=\"right\",\n        yanchor=\"top\"\n    )\n    fig.add_annotation(\n        x=loadings[i, 0],\n        y=loadings[i, 1],\n        ax=0, ay=0,\n        xanchor=\"center\",\n        yanchor=\"bottom\",\n        text=feature,\n        yshift=5,\n    )\n#fig.show()\n```\n\n```{python}\n#| eval: False\n\n# cercle des correlation\n\n(fig, ax) = plt.subplots(figsize=(8, 8))\nfor i in range(0, pca.components_.shape[1]):\n    ax.arrow(0,\n             0,  # Start the arrow at the origin\n             loadings[i, 0],  #0 for PC1\n             loadings[i,1],  #1 for PC2\n             head_width=0.1,\n             head_length=0.1)\n\n    plt.text(loadings[i,0] + 0.05,\n             loadings[i,1] + 0.05,\n             features[i])\n\n\nan = np.linspace(0, 2 * np.pi, 100)\nplt.plot(np.cos(an), np.sin(an))  # Add a unit circle for scale\nplt.axis('equal')\nax.set_title('Variable factor map')\nplt.show()\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":4,"number-sections":true,"output-file":"2526-TP1-PCA-Sujet.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","editor":"visual","theme":"cosmo","title":"TP1 - Principal Component Analysis","subtitle":"4modIA / 2025-2026","toc-location":"left"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}