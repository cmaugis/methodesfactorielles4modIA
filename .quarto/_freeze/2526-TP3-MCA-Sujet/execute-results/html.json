{
  "hash": "ef48e6f153279ee004ea336e0d177be9",
  "result": {
    "markdown": "---\ntitle: \"TP3 - Multiple Correspondence Analysis\"\nsubtitle: \"4modIA / 2025-2026\"\nformat:\n  html:\n    toc: true\n    toc-depth : 4\n    toc-location: left\n    number-sections: true\n    css: styles.css\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(FactoMineR)\nlibrary(ggplot2)\nlibrary(factoextra)\nlibrary(reticulate)\n```\n:::\n\n\n# Description des données\n\nOn s'intéresse à un jeu de données sur les propriétés de races de chiens. \nLes données sont extraites de Bréfort (1982). Elles contiennent le descriptif des qualités de 27 races de chien : \n\n- tailles (T), poids (P), vélocité (V) et intelligence (I) codées sur trois modalités (- faible, + moyen, ++ fort), \n\n- affection (Af) et agressivité (Ag) sur deux modalités (- faible, + forte), \n\n- la fonction sur trois modalités: Com (compagnie), Cha (chasse), Uti (utilité). \n\n**Question :** Chargez le jeu de données `chiens.csv` disponible sur la page moodle du cours à l'aide de la fonction `read.csv()` (pensez aux options row.names, header, stringsAsFactors).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchiens<-read.csv(.....)\nsummary(chiens)\n```\n:::\n\n\n\nDans la suite, on va s'intéresser à faire une analyse des correspondances multiples avec toutes les variables sauf la variable `fonction` que l'on considère comme variable supplémentaire. \n\n# ACM avec FactoMineR\n\n**Question :** Appliquez une ACM avec la fonction `MCA()` de la librairie `FactoMineR`. La variable `fonction` est une variable supplémentaire. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A COMPLETER\nresMCA<-MCA(...)\n```\n:::\n\n\n**Question :** Etudiez les valeurs propres. Interprétez vis-à-vis de l'inertie. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n## A COMPLETER\n```\n:::\n\n\n\n**Question :** Projetez les modalités sur le premier plan factoriel sans les individus dans un premier temps à l'aide de la fonction `fviz_mca()` et de son option `invisible`. Interprétez.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_mca(...)\n```\n:::\n\n\n\n**Question :** Ajoutez maintenant les races de chien sur le graphique précédent. Interprétez.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_mca(...)\n```\n:::\n\n\n\n**Question :** Que représente le graphique obtenu par la commande suivante ? Sur quelles quantités s'appuie ce graphique ? Retrouvez ces valeurs dans l'objet `resMCA`. A quoi correspond la moyenne de ces quantités ?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_mca_var(resMCA, choice = \"mca.cor\", \n            repel = TRUE, \n            ggtheme = theme_minimal())\n```\n:::\n\n\n**Question :** Tracez les contributions des individus et des modalités à l'aide de la fonction `fviz_contrib()`. Interprétez. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfviz_contrib(....)\n```\n:::\n\n\n\n# Retour sur quelques notions du cours\n\n**Question : ** A l'aide de la fonction `tab.disjonctif()`, construisez le tableau disjonctif complet $T=\\left(t_{i,k}^{(j)}\\right)$  et la matrice centrée $X=\\left(x_{i,k}^{(j)}\\right)$ où $x_{ik}^{(j)} = \\frac{t_{ik}^{(j)}}{f_k^{(j)}} -1$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCDT<- ...\nCDTX<- ...\n```\n:::\n\n\n\n**Question :** Dans le cadre de l'analyse des correspondances multiples, quelle matrice souhaite-t-on diagonaliser pour les individus ? Vérifiez numériquement à l'aide de la fonction `eigen()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nW<- ...\nM<- ...\nR<- ...\neigen(....)$values\nresMCA$eig[,1]\n```\n:::\n\n\n\n**Question :** Retrouvez numériquement que l'inertie vaut  $\\frac K p -1$ et que c'est la somme des valeurs propres.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A COMPLETER\n```\n:::\n\n\n\n**Question :** Quel est le lien entre MCA et CA ? Vérifiez numériquement.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A COMPLETER\n```\n:::\n\n\n# ACM sous Python\n\nNous allons maintenant utiliser la librairie `prince` pour faire une analyse des correspondances multiples en python. On récupère le jeu de données depuis l'objet R à l'aide de la librairie `reticulate`. Vous pouvez aussi lire le fichier du jeu de données sous Python.  \n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport prince\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nchienspy=r.chiens\n```\n:::\n\n\nOn met en place la MCA avec la fonction `prince.MCA` :\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmca = prince.MCA(\n    n_components=7,\n    n_iter=10,\n    copy=True,\n    check_input=True,\n    engine='sklearn',\n    random_state=42\n)\nmca = mca.fit(chienspy.iloc[:,0:6])\n```\n:::\n\n\nOn a accès aux valeurs propres à l'aide de la fonction suivante :\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmca.eigenvalues_summary\nmca.scree_plot()\n```\n:::\n\n\nOn trace les projetés dans le premier plan factoriel : \n \n\n::: {.cell}\n\n```{.python .cell-code}\nmca.plot(\n    chienspy,\n    x_component=0,\n    y_component=1,\n    show_column_markers=True,\n    show_row_markers=True,\n    show_column_labels=True,\n    show_row_labels=True\n)\n```\n:::\n\n\nOn accède aux contributions des variables à l'aide de la commande suivante :\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncontrib = mca.column_contributions_.style.format('{:.1%}')\ncontrib.highlight_max(color='orange').highlight_min(color='lightblue')\n```\n:::\n\n\nOn a également accès aux qualités :\n\n\n::: {.cell}\n\n```{.python .cell-code}\nquality_comun = mca.column_cosine_similarities(chienspy).style.format('{:.2}')\nquality_comun.background_gradient()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}